{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","onSwitchPage","newItems","lists","Math","ceil","quantityPages","Array","map","_e","i","className","classNames","disabled","href","onClick","page","active","item","items","from","to","numbers","n","push","getNumbers","App","useState","optionValue","setOptionValue","setCurrentPage","maxPage","length","lastIndexList","firstIndexList","ourList","slice","id","value","onChange","event","target","htmlFor","val","ReactDOM","render","document","getElementById"],"mappings":"2NAYaA,EAA8B,SAAC,GAOrC,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,QACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAQC,KAAKC,KAAKR,EAAQC,GAC1BQ,EAAgB,YAAIC,MAAMJ,IAAQK,KAAI,SAACC,EAAIC,GAAL,OAAWA,EAAI,KAE3D,OACE,qCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YACxB,CAAEC,SAA0B,IAAhBd,IADd,SAGE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAI,WAAMf,GACV,gBAAc,OACdgB,QAAS,kBAAMd,EAAa,aAL9B,oBAUDK,EAAcE,KAAI,SAAAQ,GAAI,OACrB,oBAEEL,UAAWC,IAAW,YACpB,CAAEK,OAAQD,IAASjB,IAHvB,SAKE,mBACE,UAAQ,WACRY,UAAU,YACVG,KAAI,WAAME,GACVD,QAAS,kBAAMf,EAAagB,IAJ9B,SAMGA,KAVEA,MAcT,oBAAIL,UAAWC,IAAW,YACxB,CAAEC,SAAUd,IAAgBI,IAD9B,SAGE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAI,WAAMf,GACV,gBAAc,QACdgB,QAAS,kBAAMd,EAAa,aAL9B,uBAYJ,6BACGC,EAASM,KAAI,SAAAU,GAAI,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCnEXC,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDDKG,CAAW,EAAG,IACzBjB,KAAI,SAAAe,GAAC,qBAAYA,MAEPG,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,mBAAS,GAA/C,mBAAO5B,EAAP,KAAoB+B,EAApB,KACMC,EAAU3B,KAAKC,KAAKc,EAAMa,OAASJ,GACrCK,EAAgBL,EAAc7B,EAC5BmC,EAAiBD,EAAgBL,EACjCO,EAAUhB,EAAMiB,MAAMF,EAAgBD,GAQxClC,IAAgBgC,IAClBE,EAAgBd,EAAMa,QAwBxB,OACE,sBAAKrB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWZ,EADX,mBACiCmC,EAAiB,EADlD,cACyDD,EADzD,aAIA,sBAAKtB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR0B,GAAG,kBACH1B,UAAU,eACV2B,MAAOV,EACPW,SAtBW,SAACC,GACpB,IAAQF,EAAUE,EAAMC,OAAhBH,MAERT,GAAgBS,GAChBR,EAAe,IAaT,UAOE,wBAAQQ,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB/B,UAAU,qBAA3C,+BAOF,cAAC,EAAD,CACEd,MAAOsB,EAAMa,OACblC,QAAS8B,EACT7B,YAAaA,EACbC,aAlEa,SAACgB,GACdjB,IAAgBiB,GAClBc,EAAed,IAiEbf,aAzDa,SAAC0C,GACN,aAARA,GAAsB5C,EAAcgC,GAGtCD,EAFgB/B,EAES,GAGf,aAAR4C,GAAsB5C,EAAc,GAGtC+B,EAFgB/B,EAES,IAgDvBG,SAAUiC,QElFlBS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9d75ee13.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n  onSwitchPage: (val: string) => void,\n  newItems: string[],\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n  onSwitchPage,\n  newItems,\n}) => {\n  const lists = Math.ceil(total / perPage);\n  const quantityPages = [...Array(lists)].map((_e, i) => i + 1);\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item',\n          { disabled: currentPage === 1 })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href={`#${currentPage}`}\n            aria-disabled=\"true\"\n            onClick={() => onSwitchPage('prevLink')}\n          >\n            «\n          </a>\n        </li>\n        {quantityPages.map(page => (\n          <li\n            key={page}\n            className={classNames('page-item',\n              { active: page === currentPage })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n        <li className={classNames('page-item',\n          { disabled: currentPage === lists })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href={`#${currentPage}`}\n            aria-disabled=\"false\"\n            onClick={() => onSwitchPage('nextLink')}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n\n      <ul>\n        {newItems.map(item => (\n          <li\n            key={item}\n            data-cy=\"item\"\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [optionValue, setOptionValue] = useState(3);\n  const [currentPage, setCurrentPage] = useState(1);\n  const maxPage = Math.ceil(items.length / optionValue);\n  let lastIndexList = optionValue * currentPage;\n  const firstIndexList = lastIndexList - optionValue;\n  const ourList = items.slice(firstIndexList, lastIndexList);\n\n  const pageChange = (page: number) => {\n    if (currentPage !== page) {\n      setCurrentPage(page);\n    }\n  };\n\n  if (currentPage === maxPage) {\n    lastIndexList = items.length;\n  }\n\n  const switchPage = (val: string) => {\n    if (val === 'nextLink' && currentPage < maxPage) {\n      const newPage = currentPage;\n\n      setCurrentPage(newPage + 1);\n    }\n\n    if (val === 'prevLink' && currentPage > 1) {\n      const newPage = currentPage;\n\n      setCurrentPage(newPage - 1);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setOptionValue(+value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstIndexList + 1} - ${lastIndexList} of 42)`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={optionValue}\n            onChange={handleChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n\n      <Pagination\n        total={items.length} // total number of items to paginate\n        perPage={optionValue} // number of items per page\n        currentPage={currentPage} /* optional with 1 by default */\n        onPageChange={pageChange}\n        onSwitchPage={switchPage}\n        newItems={ourList}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}